<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder ignore-unresolvable="true" location="classpath:jdbc.properties"/>

    <!-- 配置数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>

        <!--<property name="validationQuery" value="${validationQuery}"/>-->
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>

        <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>

        <!-- 监控数据库 -->
        <property name="filters" value="mergeStat"/>

    </bean>

    <!-- Druid监控配置 BEGIN -->
    <bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>
    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
        <property name="patterns">
            <list>
                <value>com.chinaweal..*service.*</value>
                <value>com.chinaweal..*dao.*</value>
            </list>
        </property>
    </bean>
    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
    </aop:config>
    <!-- Druid监控配置 END -->

    <!-- Spring 整合 Mybatis-plus -->
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:mybatis/mapper/**/*Mapper.xml"/>
        <property name="configLocation" value="classpath:mybatis/mybatis-config.xml"></property>
        <property name="globalConfig" ref="globalConfig"/>
    </bean>

    <!--全局配置-->
    <bean id="globalConfig" class="com.baomidou.mybatisplus.core.config.GlobalConfig">
        <!-- 公共字段填充处理器 -->
        <property name="metaObjectHandler">
            <bean class="com.chinaweal.youfool.framework.mybatis.plus.CommonMetaObjectHandler"></bean>
        </property>
    </bean>

    <!-- MapperScan配置 -->
<!--    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
<!--        <property name="basePackage" value="com.chinaweal.youfool"/>-->
<!--        &lt;!&ndash; markerInterface：基于接口的过滤器，实现了该接口的才会被扫描器扫描，与basePackage是与的作用。 &ndash;&gt;-->
<!--        <property name="markerInterface" value="com.baomidou.mybatisplus.core.mapper.BaseMapper"/>-->
<!--    </bean>-->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.chinaweal"/>
        <!-- markerInterface：基于接口的过滤器，实现了该接口的才会被扫描器扫描，与basePackage是与的作用。 -->
        <property name="markerInterface" value="com.baomidou.mybatisplus.core.mapper.BaseMapper"/>
    </bean>

    <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
    <!-- 扫描aicorg接口包 -->
    <context:component-scan base-package="com.chinaweal.**.dao"/>
    <context:component-scan base-package="com.chinaweal.sdcs.crcs.util"/>
    <!-- 事务配置 begin-->
    <!--
        PROPAGATION_SUPPEROTS：如果已存在事务，则加入事务；如果没有事务，则以非事务的方式执行。
        PROPAGATION_MANDATORY:使用当前事务，如果没有，则抛出异常；
        PROPAGATION_REQUIRED:如果当前有事务，则加入事务；如果没有事务，则新建事务。
        PROAGATION_NOT_SUPPORTED:以非事务的方式执行，如果当前有事务，则挂起
        PROPAGATION_NEVER：以非事务的方式执行，如果当前有事务，则抛出异常；
        +/-Exception +表示异常出现时提交事务 -表示异常出现时事务回滚
    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="search*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="del*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="save*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:advisor advice-ref="txAdvice" pointcut="execution(public * com.chinaweal..*service.*.*(..))"/>
    </aop:config>
    <!-- 事务配置 end-->

    <!-- JdbcTemplate配置 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- aicorg数据源配置 -->
    <bean id="dbComponent" class="com.chinaweal.publibv2.db.spring.DBComponent">
        <property name="dataSourceMap">
            <map>
                <entry key="aicOrgDataSource" value-ref="dataSource"/>
            </map>
        </property>
    </bean>
</beans>
